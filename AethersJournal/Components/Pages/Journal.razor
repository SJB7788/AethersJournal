@page "/journal"
@inject NavigationManager NavManager
@inject JournalService JournalService
@inject JournalStateService JournalStateService

@rendermode InteractiveServer

<PageTitle>Journal</PageTitle>
<script defer src="/js/Journal.js"></script>

<div class="main-journal-container">
    <div class="journal-header">
        <div class="header-title">
            <div class="title-date">
                <h1 class="date">@_selectedDate.ToString("dddd, MMMM dd yyyy")</h1>
                <span class="dropdown"></span>
            </div>
            <div class="title-controller">
                <button class="save" @onclick="SaveJournal">
                    Save Journal
                </button>
            </div>
        </div>
        <div class="header-controller">
            <a class="navigation" id="navigation-prev" @onclick="Previous">
                &lt Previous
            </a>
            <a class="navigation" id="navigation-next" @onclick="Next">
                Next &gt </a>
        </div>
    </div>

    <div class="journal-contents">
        <TextEditor @bind-Content="_journalContent" @bind-Title="_journalTitle" @key="_selectedDate" />
        <Chatbox @ref="_chatboxComponent" /> @* @bind-JournalId="_journalId" *@
    </div>

    <div @ref="_saveMessage" class="saving-message">Saving...</div>
</div>


@code {
    private DateTime _selectedDate;
    private string _journalContent = String.Empty;
    private string _journalTitle = String.Empty;
    private int _journalId;
    private Chatbox? _chatboxComponent;
    private ElementReference _saveMessage;

    protected override async Task OnParametersSetAsync()
    {
        this._selectedDate = GetQueryDate();
        JournalEntry? entry = await JournalService.GetEntryForUser(1, this._selectedDate);
        if (entry != null)
        {
            this._journalContent = entry.Content;
            this._journalTitle = entry.Title;
            this._journalId = entry.Id;
        }

        Console.WriteLine("Journal Entry: " + _journalContent);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_chatboxComponent != null && _journalId != 0)
        {
            await JournalStateService.SetJournalIdAsync(_journalId);
        }
    }

    private DateTime GetQueryDate()
    {
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        DateTime date;

        if (query.TryGetValue("date", out var dateString) &&
        DateTime.TryParse(dateString, out var parsedDate))
        {
            date = DateTime.SpecifyKind(parsedDate.Date, DateTimeKind.Utc);
            // check if the date is ahead of current date
            if (date > DateTime.UtcNow.Date)
            {
                date = DateTime.UtcNow.Date;
                NavManager.NavigateTo("/journal");
            }
        }
        else
        {
            date = DateTime.UtcNow.Date;
        }

        return date;
    }

    protected void Previous()
    {
        this._selectedDate = this._selectedDate.AddDays(-1);
        string formattedDate = this._selectedDate.ToString("yyy-MM-dd");

        NavManager.NavigateTo($"/journal?date={formattedDate}");
        // Temporary Solution to TextEditor not rerendering
        NavManager.Refresh(true);
    }

    protected void Next()
    {
        this._selectedDate = this._selectedDate.AddDays(1);
        string formattedDate = this._selectedDate.ToString("yyy-MM-dd");

        NavManager.NavigateTo($"/journal?date={formattedDate}");
        NavManager.Refresh(true);
    }

    protected async Task SaveJournal()
    {
        await ShowSavingMessage("Saving...");
        JournalEntry entry = await JournalService.SaveOrUpdateAndSummarizeAsync(1, this._journalTitle, this._journalContent, this._selectedDate);
        await ShowSavingMessage("Saved!", 2000);
        await JournalService.CreateConversation(1, entry.Id);

        if (this._journalId != entry.Id)
        {
            await JournalStateService.SetJournalIdAsync(entry.Id);
        }
    }

    protected async Task ShowSavingMessage(string message, int duration = 1000)
    {
        await JS.InvokeVoidAsync("Journal.showSaveMessage", _saveMessage, message, duration);
    }
    [Inject] private IJSRuntime JS { get; set; } = default!;
}
