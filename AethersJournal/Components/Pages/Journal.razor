@page "/journal"
@inject NavigationManager NavManager
@inject JournalService JournalService
@inject FreeAITherapist AITherapist
@rendermode InteractiveServer

<PageTitle>Journal</PageTitle>

<div class="main-journal-container">
    <div class="journal-header">
        <div class="header-title">
            <div class="title-date">
                <h1 class="date">Sunday, April 20 2025</h1>
                <span class="dropdown"></span>
            </div>
            <div class="title-controller">
                <button class="save" @onclick="SaveJournal">
                    Save Journal
                </button>
                <p>Saving...</p>
            </div>
        </div>
        <div class="header-controller">
            <a class="navigation" id="navigation-prev" @onclick="Previous">
                &lt Previous
            </a>
            <a class="navigation" id="navigation-next" @onclick="Next">
                Next &gt </a>
        </div>
    </div>

    <div class="journal-contents">
        <TextEditor @bind-Content="journalContent" @key="selectedDate"/>
        <Chatbox />
    </div>
</div>


@code {
    private DateTime selectedDate;
    private string journalContent = String.Empty;
    protected override async Task OnParametersSetAsync()
    {
        this.selectedDate = GetQueryDate();
        JournalEntry? entry = await JournalService.GetEntryForUser(1, this.selectedDate);
        if (entry != null) {
            this.journalContent = entry.Content;
        } else {
            this.journalContent = "";
        }
        Console.WriteLine("Journal Entry: " + journalContent);

        @* string response = await AITherapist.Converse("Hello I am having a rough day");
        Console.WriteLine(response); *@
    }

    private DateTime GetQueryDate() {
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        DateTime date;

        if (query.TryGetValue("date", out var dateString) &&
        DateTime.TryParse(dateString, out var parsedDate))
        {
            date = DateTime.SpecifyKind(parsedDate.Date, DateTimeKind.Utc);
            // check if the date is ahead of current date
            if (date > DateTime.UtcNow.Date) {
                date = DateTime.UtcNow.Date;
                NavManager.NavigateTo("/journal");
            }
        }
        else
        {
            date = DateTime.UtcNow.Date;
        }
    
        return date;
    }

    protected void Previous() {
        this.selectedDate = this.selectedDate.AddDays(-1);
        string formattedDate = this.selectedDate.ToString("yyy-MM-dd");

        NavManager.NavigateTo($"/journal?date={formattedDate}");
        // Temporary Solution to TextEditor not rerendering
        NavManager.Refresh(true);
    }

    protected void Next() {
        this.selectedDate = this.selectedDate.AddDays(1);
        string formattedDate = this.selectedDate.ToString("yyy-MM-dd");

        NavManager.NavigateTo($"/journal?date={formattedDate}");
        NavManager.Refresh(true);
    }

    protected async Task SaveJournal() {
        await JournalService.SaveOrUpdateJournal(1, this.journalContent, this.selectedDate);
    }
}
