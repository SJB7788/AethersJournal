@page "/login"
@rendermode InteractiveServer
@layout EmptyLayout

@inject IHttpClientFactory ClientFactory
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager Navigation


<div class="login">
    <div class="login__form">
        <div class="login__input-group">
            <div class="login__email-group">
                <label for="email-input" class="login__label">Email</label>
                <input @bind-value="loginModel.Email" type="text" id="email-input"
                    class="login__input login__input--email">
            </div>

            <div class="login__password-group">
                <div class="login__password-header-group">
                    <label for="password-input" class="login__label">Password</label>
                    <p class="login__forgot-link">Forgot password?</p>
                </div>
                <input @bind-value="loginModel.Password" type="password" id="password-input"
                    class="login__input login__input--password">
            </div>
        </div>
        <div class="login__actions-group">
            <div class="login__actions">
                <button @onclick="HandleLogin" class="login__button login__button--primary">
                    Sign in
                </button>
                <a href="/register" class="login__signup-link">Create an account</a>
            </div>


            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="login__error">
                    <p class="login__error-message">@errorMessage</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private HttpClient Http => ClientFactory.CreateClient("AethersJournal");
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/account/signin", loginModel);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed: " + ex.Message;
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}