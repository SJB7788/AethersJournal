@inject FreeAITherapist AITherapist
@inject JournalService JournalService
@inject JournalStateService JournalStateService

<script defer src="/js/ChatBox.js"></script>

<div id="chatbox-button" role="button" onclick="ChatBox.openOrCloseChatbox(event)" data-target="#chatbox-body">
    <div class="button"></div>
</div>

<div id="chatbox-body">
    <div id="chatbox-content" @ref="_chatboxDiv">
        <div class="ai-message">Enter any thoughts here and I will respond!</div>
    </div>
    <div id="chatbox-input-container">
        <input id="chatbox-input" type="text" @bind-value="Message" @onkeydown="Enter">
        <div id="chatbox-send" data-target="chatbox-input" @onclick="SendMessage"></div>
    </div>
</div>

@code {
    public string Message = String.Empty;
    private int _journalId;
    private string _entrySummary = String.Empty;
    private ElementReference _chatboxDiv;
    protected override void OnInitialized()
    {
        JournalStateService.OnJournalChangedAsync += HandleJournalChange;
    }

    public async Task HandleJournalChange(int journalId, string journalSummary)
    {
        this._journalId = journalId;
        this._entrySummary = journalSummary;

        AITherapist.AddToSystemPrompt($"Journal Entry Summary: {journalSummary}");

        List<ConversationMessage>? messages = await JournalService.GetAllConversationMessage(journalId);

        if (messages != null)
        {
            foreach (var message in messages)
            {
                await AddChatBubble(message.Content, message.Role == ChatProfile.User);
                AITherapist.AddToContentHistory(message.Content, message.Role == ChatProfile.User ? GeminiAPIRole.user :
                GeminiAPIRole.model);
            }
        }

        StateHasChanged();
    }

    protected async Task SendMessage()
    {
        if (string.IsNullOrEmpty(Message) || this._journalId == 0) return;

        try
        {
            // save user message to db and add change to UI
            await JournalService.AddConversationMessage(this._journalId, this.Message, ChatProfile.User);
            await AddChatBubble(Message, isUser: true);

            string response = await AITherapist.Converse(Message);

            await JournalService.AddConversationMessage(this._journalId, response, ChatProfile.AI);
            await AddChatBubble(response, isUser: false);
            
            // reset message
            Message = "";
        }
        catch
        {
            Console.WriteLine("Error: Something went wrong. Please try again.");
            await AddChatBubble("I'm having trouble responding. Try again later.", isUser: false);
        }
    }

    protected async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    protected async Task AddChatBubble(string chatMessage, bool isUser)
    {
        await JS.InvokeVoidAsync("ChatBox.addMessage", _chatboxDiv, chatMessage, isUser);
    }

    public void Dispose()
    {
        JournalStateService.OnJournalChangedAsync -= HandleJournalChange;
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}